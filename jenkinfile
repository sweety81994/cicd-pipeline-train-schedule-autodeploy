pipeline {
    
    tools{
        jdk 'myjava'
        maven 'mymaven'
    }
    agent none
    stages{
        stage('checkout'){
            agent any
            steps{
                git branch: 'master', url: 'https://github.com/sweety81994/cicd-pipeline-train-schedule-autodeploy.git'
            }
        }
        stage('compile'){
            agent any
            steps{
                sh 'mvn compile'
            }
        }
        stage('codeReview'){
            agent any
            steps{
                sh 'mvn pmd:pmd'
            }
        }
        stage('unitTest'){
            agent any
            steps{
                sh 'mvn test'
            }
        }
        
        stage('package'){
            agent {label 'linux_slave'}
            steps{
                git branch: 'master', url: 'https://github.com/sweety81994/cicd-pipeline-train-schedule-autodeploy.git'
                sh 'mvn package'
            }
        
        }
   
    environment {
        DOCKER_IMAGE_NAME = "kavitha08/train-schedule"
    }
        stage('Build') {
        agent {label 'linux_slave'}
            steps {
                echo 'Running build automation'
                sh './gradlew build --no-daemon'
                archiveArtifacts artifacts: 'dist/trainSchedule.zip'
            }
        }
        stage('Build Docker Image') {
        agent {label 'linux_slave'}
            when {
                branch 'master'
            }
            steps {
        
                script {
                    app = docker.build(DOCKER_IMAGE_NAME)
                    app.inside {
                        sh 'echo Hello, World!'
                    }
                }
            }
        }
        stage('Push Docker Image') {
        agent {label 'linux_slave'}
            when {
                branch 'master'
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker_hub_login') {
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }
        }
        stage('CanaryDeploy') {
        agent {label 'linux_slave'}
            when {
                branch 'master'
            }
            environment { 
                CANARY_REPLICAS = 1
            }
            steps {
                kubernetesDeploy(
                    kubeconfigId: 'kubeconfig',
                    configs: 'train-schedule-kube-canary.yml',
                    enableConfigSubstitution: true
                )
            }
        }
        stage('DeployToProduction') {
        agent {label 'linux_slave'}
            when {
                branch 'master'
            }
            environment { 
                CANARY_REPLICAS = 0
            }
            steps {
                input 'Deploy to Production?'
                milestone(1)
                kubernetesDeploy(
                    kubeconfigId: 'kubeconfig',
                    configs: 'train-schedule-kube-canary.yml',
                    enableConfigSubstitution: true
                )
                kubernetesDeploy(
                    kubeconfigId: 'kubeconfig',
                    configs: 'train-schedule-kube.yml',
                    enableConfigSubstitution: true
                )
            }
        }
    }
}
